<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0cbb0342-be6d-43b7-8bb6-616c39805004" activeEnvironment="Default" name="RestServiceTestProject" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="bda34219-1708-4c49-877e-8c1c68b48b93" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://reqres.in" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://DESKTOP-SAEGSCA:8089/</con:endpoint><con:endpoint>https://reqres.in/api</con:endpoint></con:endpoints><con:resource name="Get list of users on page" path="/users" id="a874ddd8-545d-416a-a750-2a22c8a3d8f9"><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="" id="cd05d876-c1a0-45e0-9c99-47d85c3dc782" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xmlns:user="https://reqres.in/api/users">user:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="GET list of users on page" id="dec87582-da36-40b0-af4c-fd0413862814" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="page" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>page</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Get single user" path="/users/{id}" id="eefed02d-0bb1-4c4f-8c80-4debadc2fa41"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="" id="1aff1e1c-bf94-4368-b847-ed69eae3fb7a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="https://reqres.in/api/users/1">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GET single user" id="75e20893-5e51-44ab-992b-29649145cfd5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Create user" path="/users" id="4930a95d-8e7b-49d6-9f53-6f3671ac419e"><con:settings/><con:parameters/><con:method name="" id="6d1c865f-6d8d-43f9-8011-3531ba285456" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:user="https://reqres.in/api/users">user:Response</con:element></con:representation><con:request name="Create a user" id="a8cb4b62-e057-4bd1-845e-3a8a77929331" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "leader"
}</con:request><con:originalUri>https://reqres.in/api/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Update user" path="/users/{id}" id="25f24b62-de1e-4148-8d28-f5593af73c63"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>1</con:value><con:style>TEMPLATE</con:style><con:default>1</con:default></con:parameter></con:parameters><con:method name="" id="2a762043-e29e-478d-8416-f6d3d24017db" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:user="https://reqres.in/api/users">user:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Update a user" id="f25b2f67-cbd6-4460-861e-420d99254081" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "zion resident"
}</con:request><con:originalUri>https://reqres.in/api/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Update user" path="/users/{id}" id="442d0d0c-d2c0-45fc-8ce3-3342522942a5"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="" id="6f4fae06-214d-4284-be1e-4ac2033dc8f7" method="PATCH"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="https://reqres.in/api/users/1">ns:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Update a user" id="fcf64dfc-376e-4fb0-aaf8-ca4abf89307c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "zion resident"
}</con:request><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Delete user" path="/users/{id}" id="99abe82b-6351-4be2-88a4-b35c9270fc3a"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="" id="d04997cb-05d9-49be-b55b-7d5e60651ebd" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Delete a user" id="ef24a021-b638-4e14-bafe-12f5958845aa" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Register user" path="/register" id="34e22721-ba29-4fd8-b841-ed74f53bb858"><con:settings/><con:parameters/><con:method name="" id="a7cd06cc-97a6-45b4-8ef7-799c6b27e68f" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:reg="https://reqres.in/api/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="https://reqres.in/api/register">reg:Fault</con:element></con:representation><con:request name="Register a user" id="a5d2b87d-b3c9-4ee1-bd32-d9aa4fd18435" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "email": "sydney@fife",
    "password": "pistol"
}</con:request><con:originalUri>https://reqres.in/api/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Log user in" path="/login" id="258a377a-92c9-4414-b265-deb1bb9e8932"><con:settings/><con:parameters/><con:method name="" id="60c5ab68-1a54-4e49-bacb-1ce9405cb88b" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="https://reqres.in/api/login">log:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:log="https://reqres.in/api/login">log:Fault</con:element></con:representation><con:request name="LogIn" id="feb2c206-b026-4b2e-a162-5102f94da2a2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "email": "peter@klaven",
    "password": "cityslicka"
}</con:request><con:originalUri>https://reqres.in/api/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="4102308a-ade5-4576-a98a-33a1b11a87a8" name="UserTestSuite"><con:description>TestSuite generated for REST Service [https://reqres.in]</con:description><con:settings/><con:runType>PARALLELL</con:runType><con:testCase id="c866263a-da65-4712-910b-243b2f4b454c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get list of users on page TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Get list of users on page] located at [/users]</con:description><con:settings/><con:testStep type="restrequest" name="GET list of users on page" id="a0b8a04d-630b-4ab5-b7e5-459e73600462"><con:settings/><con:config service="https://reqres.in" resourcePath="/users" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET list of users on page" id="dec87582-da36-40b0-af4c-fd0413862814" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users</con:originalUri><con:assertion type="JsonPath Count" id="d996a4c0-700f-4ce0-bb34-1a681b016466" name="page count is 1"><con:configuration><path>page</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="6dfdcd65-6a3f-4b3b-a0f1-423b9ecd2cab" name="per_page count is 1"><con:configuration><path>per_page</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="40d27917-8af7-4d91-a9ba-1c5dd5ee4e31" name="total count is 1"><con:configuration><path>total</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="d8d2bc29-5aaf-4c87-80a9-895cf0cbb472" name="total_pages count is 1"><con:configuration><path>total_pages</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="428a4327-892a-494c-a3ed-e2a64e419b98" name="data count is 3"><con:configuration><path>data</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="e8d462d7-f058-48b8-ac2c-2cf85f198ac4" name="page exists"><con:configuration><path>page</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="fd1fc62a-9e0d-4ffb-be56-828109b3f9f7" name="per_page exists"><con:configuration><path>per_page</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5c0344af-49e8-4ced-b701-7a4488e0b4b9" name="total exists"><con:configuration><path>total</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="0ce36ea5-ae30-4275-8f37-df586211b5ae" name="total_pages exists"><con:configuration><path>total_pages</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="6155469d-967d-46ab-ada2-4851243da321" name="data exists"><con:configuration><path>data</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d7867be-ab35-45c1-a723-29c467c59455" name="page is 1"><con:configuration><path>page</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be94811b-111d-4e21-9ee0-4f8ffcc61cd5" name="per_page is 3"><con:configuration><path>per_page</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="778ddcb1-78c2-4dc7-af8e-5669bacf5f9f" name="total is 12"><con:configuration><path>total</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba5092bf-8506-4c24-83ce-dbeba425d1fc" name="total_pages is 4"><con:configuration><path>total_pages</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b22f770a-3d70-4cef-89ef-9f3798c52fcb" name="data[0].id is 1"><con:configuration><path>data[0].id</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e74cf34-52ef-4ab8-98ee-1766c8c0136f" name="data[0].first_name is George"><con:configuration><path>data[0].first_name</path><content>George</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d6b1d86-5f3f-48db-878f-600236a81344" name="data[0].last_name is Bluth"><con:configuration><path>data[0].last_name</path><content>Bluth</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath RegEx Match" id="b20e8ada-47c3-4544-abcd-d6ff9b36973e" name="data[0].avatar matches regular expression"><con:configuration><path>data[0].avatar</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments><regEx>^https://s3.amazonaws.com/(.*).jpg</regEx></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="38d9aa20-484b-4c79-8f8f-f8f4a4fac313" name="Invalid HTTP Status Codes"><con:configuration><codes>201,202,204,302,304,400,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f1235f32-bed7-4439-8846-8e6e9ae5dee8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def responseContent = messageExchange.response.responseContent
def response = new JsonSlurper().parseText(responseContent)
String httpStatus = messageExchange.responseHeaders["#status#"]

assert !response.isEmpty()

assert response.page == 1
assert response.per_page == 3
assert response.total == 12
assert response.total_pages == 4
assert response.data.size() == 3
assert response.data.collect{item -> item.id}.equals([1, 2, 3])
assert response.data.collect{item -> item.first_name}.equals(["George", "Janet", "Emma"])
assert response.data.collect{item -> item.last_name}.equals(["Bluth", "Weaver", "Wong"])
response.data.collect{item -> item.avatar}.each{item -> assert item.matches("https://s3.amazonaws.com/(.*).jpg")}

log.info("Verifies if HTTP status code is 200 OK")
assert httpStatus.contains("200 OK")
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="page" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>page</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:loadTest id="8c7c7606-7d58-4f16-b4c1-d779f989443a" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="7cdffa4b-f6e3-48ab-a1d3-c54caf2ca951" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get single user TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Get single user] located at [/users/{id}]</con:description><con:settings/><con:testStep type="restrequest" name="GET single user" id="0a89eecc-2154-43aa-ac1b-fd406d85e4d2"><con:settings/><con:config service="https://reqres.in" resourcePath="/users/{id}" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET single user" id="75e20893-5e51-44ab-992b-29649145cfd5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:assertion type="JsonPath Count" id="f91bbae2-f816-4e11-967a-b57396f703ff" name="data count is 1"><con:configuration><path>data</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="7e7ce7bc-5837-46e3-ae5a-1b5502b4f3c3" name="data exists"><con:configuration><path>data</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="0c61695f-bcb4-4555-8550-96a1485bc6e8" name="page doesn't exist"><con:configuration><path>page</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="86a074b1-fa35-4ad8-b900-9178502ba718" name="per_page doesn't exist"><con:configuration><path>per_page</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="38589dc7-3593-4426-bda6-c9ec6b67fee9" name="total doesn't exist"><con:configuration><path>total</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="58097d3f-7bf8-4baa-9426-c2582aabbd4f" name="total_pages doesn't exist"><con:configuration><path>total_pages</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b909e94-b9f5-4aa8-9107-529a358bc8e9" name="data.id is 1"><con:configuration><path>data.id</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0adf0dbd-5b98-44b9-a48a-b1d9808fe4e8" name="first_name is George"><con:configuration><path>data.first_name</path><content>George</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3e0f62f-51f4-4403-a800-e87ac29d43eb" name="last_name is Bluth"><con:configuration><path>data.last_name</path><content>Bluth</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="690c3d75-3c97-48fb-a75a-f9d560437e38" name="avatar is .jpg"><con:configuration><path>data.avatar</path><content>https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="7904e019-b66b-4b0e-94b1-10745b9b4a81" name="Invalid HTTP Status Codes"><con:configuration><codes>201,202,204,302,304,400,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET single user - not found" id="502083fe-32a7-40f3-921a-686fd076aaae"><con:settings/><con:config service="https://reqres.in" resourcePath="/users/{id}" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET single user - not found" id="75e20893-5e51-44ab-992b-29649145cfd5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:assertion type="GroovyScriptAssertion" id="53511d92-b332-432d-b408-35b7fbff72ff" name="response is empty"><con:configuration><scriptText>import groovy.json.JsonSlurper

def responseContent = messageExchange.response.responseContent
def response = new JsonSlurper().parseText(responseContent)
assert response.isEmpty()</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cc268c72-d02f-458e-8c1b-8ac857fc0678" name="status is 404"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
assert httpStatus.contains("404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="8f637cdd-ceb2-44e9-b253-c1f5bd5fa5ed" name="Invalid HTTP Status Codes"><con:configuration><codes>200,201,202,204,302,304,400,401,403,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="23" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:loadTest id="4dfd6291-c77e-45f8-860a-05b14534daeb" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="936795cb-f8a9-4a3b-ba4c-c58a33131d6d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create user TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Create user] located at [/users]</con:description><con:settings/><con:testStep type="restrequest" name="Create a user" id="a2d8a11d-892e-4f37-9ac8-110710b71971"><con:settings/><con:config service="https://reqres.in" resourcePath="/users" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create a user" id="a8cb4b62-e057-4bd1-845e-3a8a77929331" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "leader"
}</con:request><con:originalUri>https://reqres.in/api/users</con:originalUri><con:assertion type="JsonPath Count" id="5a23302e-ba1e-4480-b99b-e52e3b4b1692" name="name count is 1"><con:configuration><path>name</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="18c57530-3a27-444f-b155-91d66ea2955e" name="job count is 1"><con:configuration><path>job</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="099d3798-65bc-4bf1-98e6-97708ba72b19" name="id count is 1"><con:configuration><path>id</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="7d3b6521-8a79-4c21-8173-071ef3d14361" name="createdAt count is 1"><con:configuration><path>createdAt</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath RegEx Match" id="3c008fcf-308a-4d8d-990d-27ce18075570" name="createdAt matches yyyy-mm-ddThh-mm-ss.SSSZ"><con:configuration><path>createdAt</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments><regEx>(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).(\d{3})Z</regEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="437c880d-6cc1-4285-882e-90bf762eb233" name="name is morpheus"><con:configuration><path>name</path><content>morpheus</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f07170a1-fc80-4553-a4b2-ac4e5ebaaca5" name="job is leader"><con:configuration><path>job</path><content>leader</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5f7f2096-0907-4cbe-a143-74a6ca8eca3e" name="Invalid HTTP Status Codes"><con:configuration><codes>200,202,204,302,304,400,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1571b130-31b5-46b8-ab2b-075b23902c6c" name="status code is 201"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
log.info(httpStatus)
assert httpStatus.contains("201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="JsonPath RegEx Match" id="374b98dd-08d2-407b-b822-7c0ed9aea717" name="id is numeric"><con:configuration><path>id</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments><regEx>\d{3}</regEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest id="62fe4719-02a4-4bcc-8afc-b497f84498bc" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="b924ae43-6192-4fe5-9dde-e55af6cb4684" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update user TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Update user] located at [/users/{id}]</con:description><con:settings/><con:testStep type="restrequest" name="Update a user" id="cb262319-c8f7-43f9-ae49-670afdff8cf7"><con:settings/><con:config service="https://reqres.in" resourcePath="/users/{id}" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update a user" id="f25b2f67-cbd6-4460-861e-420d99254081" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "zion resident"
}</con:request><con:originalUri>https://reqres.in/api/users</con:originalUri><con:assertion type="JsonPath Count" id="c773120e-6639-43e8-b7d2-9f194bf86149" name="name count is 1"><con:configuration><path>name</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b244d254-bb0b-470d-9053-3f3ad7504ec0" name="job count"><con:configuration><path>job</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="f985fd7b-8e7d-4188-9407-45c7206a19a9" name="updatedAt count is 1"><con:configuration><path>updatedAt</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f252f451-b52d-4d75-95c0-9618117278bf" name="name is morpheus"><con:configuration><path>name</path><content>morpheus</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="169988a1-7896-4300-b7a5-cf4508b3f476" name="job is zion resident"><con:configuration><path>job</path><content>zion resident</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath RegEx Match" id="397f2ff8-7643-477b-8b24-d8cf5dc694d5" name="updatedAt matches yyyy-mm-ddThh-mm-ss.SSSZ"><con:configuration><path>updatedAt</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments><regEx>(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).(\d{3})Z</regEx></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="69292fb7-a4b5-416a-924d-ceae30f117d0" name="Invalid HTTP Status Codes"><con:configuration><codes>201,202,204,302,304,400,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="555e9610-1ba5-41c8-80a2-4a161379bb99" name="status code is 200"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
log.info(httpStatus)
assert httpStatus.contains("200 OK")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:loadTest id="16c21066-3818-4876-bfc1-d12cd7a33b4e" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="525bcae8-3bd6-44dc-810a-8ca4ef9d4d2f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete user TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Delete user] located at [/users/{id}]</con:description><con:settings/><con:testStep type="restrequest" name="Delete a user" id="0b51b5ae-6eae-446c-8c2d-7ec5a0fee4e3"><con:settings/><con:config service="https://reqres.in" resourcePath="/users/{id}" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete a user" id="ef24a021-b638-4e14-bafe-12f5958845aa" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e4aad961-afd8-485b-bfc8-5fa71adf6ac9" name="response is empty"><con:configuration><scriptText>import groovy.json.JsonSlurper

def responseContent = messageExchange.response.responseContent
assert responseContent == null</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8171cdf5-2086-4ca8-93f8-cc740e89f561" name="status is 204"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
assert httpStatus.contains("204 No Content")</scriptText></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="d6c8b7aa-0319-4f35-bebd-645f0532076d" name="Invalid HTTP Status Codes"><con:configuration><codes>200,201,202,302,304,400,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:loadTest id="0d2c15d5-9318-4454-871d-9def4bb8f307" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="7278bb05-69bb-4856-959d-2c7d68ea1229" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update user TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Update user] located at [/users/{id}]</con:description><con:settings/><con:testStep type="restrequest" name="Update a user" id="3d41da2f-559a-404d-9453-07c60cfc2721"><con:settings/><con:config service="https://reqres.in" resourcePath="/users/{id}" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update a user" id="fcf64dfc-376e-4fb0-aaf8-ca4abf89307c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "zion resident"
}</con:request><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:assertion type="JsonPath Match" id="51dce1ce-1f1a-408d-9202-5ae9d3170cbe" name="name is morpheus"><con:configuration><path>name</path><content>morpheus</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c741606-1b76-4fb8-8a40-0322fa2d136a" name="job is zion resident"><con:configuration><path>job</path><content>zion resident</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath RegEx Match" id="34b76099-0e10-4578-a87f-70a6ca9b590c" name="updatedAt matches yyyy-mm-ddThh-mm-ss.SSSZ"><con:configuration><path>updatedAt</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments><regEx>(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).(\d{3})Z</regEx></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="1d4db807-5d0c-4121-b881-5cc43169c26f" name="status code is 200"><con:configuration><codes>201,202,204,302,304,400,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="03536278-74d3-4873-8eff-a2d8c43fa59a" name="Script Assertion"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
assert httpStatus.contains("200 OK")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:loadTest id="ad4224bc-1b9c-4bab-8219-0ef94d4f3f28" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="17e62765-ce22-4b0b-9d95-63c80c432350" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Register user TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Register user] located at [/register]</con:description><con:settings/><con:testStep type="restrequest" name="Register a user" id="e7bb2df0-eedd-4872-b10c-837990c75a4e"><con:settings/><con:config service="https://reqres.in" resourcePath="/register" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register a user" id="a5d2b87d-b3c9-4ee1-bd32-d9aa4fd18435" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "email": "sydney@fife",
    "password": "pistol"
}</con:request><con:originalUri>https://reqres.in/api/register</con:originalUri><con:assertion type="JsonPath Count" id="b0e0787c-e5eb-450b-86cc-2661ff7057f3" name="token count is 1"><con:configuration><path>token</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="85570f43-3a91-480d-97ae-239e76e55c6a" name="token is not empty"><con:configuration><scriptText>import groovy.json.JsonSlurper

def responseContent = messageExchange.response.responseContent
def response = new JsonSlurper().parseText(responseContent)
assert !response.token.isEmpty()</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b1d9668e-c290-46cd-9a9d-a96c33ed2f5b" name="status is 201"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
assert httpStatus.contains("201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="cc067460-9d4d-4dea-98f2-6a3c2c6fcaf0" name="Invalid HTTP Status Codes"><con:configuration><codes>200,202,204,302,304,400,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Register a user - unsuccessful" id="0d5b1e60-fa43-4a77-915e-1b814110fbe1"><con:settings/><con:config service="https://reqres.in" resourcePath="/register" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register a user - unsuccessful" id="a5d2b87d-b3c9-4ee1-bd32-d9aa4fd18435" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "email": "sydney@fife"
}</con:request><con:originalUri>https://reqres.in/api/register</con:originalUri><con:assertion type="JsonPath Match" id="3cb9bba3-9eb3-4386-af83-fee8e338259b" name="error says that password is missing"><con:configuration><path>error</path><content>Missing password</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="51417951-7ad4-462e-9618-c450c411b577" name="status code is 400"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
assert httpStatus.contains("400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="89584607-3edb-4379-bf0f-83f46756b71d" name="Invalid HTTP Status Codes"><con:configuration><codes>200,201,202,204,302,304,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest id="fa2b2cad-39e0-4288-b20f-b9671e8c50f3" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="acbcd30f-ec83-4f02-8beb-b977debf9370" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Log user in TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Log user in] located at [/login]</con:description><con:settings/><con:testStep type="restrequest" name="LogIn" id="e99925f2-1d05-4aa4-b2dc-d469d957700c"><con:settings/><con:config service="https://reqres.in" resourcePath="/login" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LogIn" id="feb2c206-b026-4b2e-a162-5102f94da2a2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "email": "peter@klaven",
    "password": "cityslicka"
}</con:request><con:originalUri>https://reqres.in/api/login</con:originalUri><con:assertion type="JsonPath Count" id="7649f673-d553-41dd-98ce-6f2f34f6a5d0" name="token count is 1"><con:configuration><path>token</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1c9aaf1d-f588-4a25-ab80-38eb3213fb8f" name="token is not empty"><con:configuration><scriptText>import groovy.json.JsonSlurper

def responseContent = messageExchange.response.responseContent
def response = new JsonSlurper().parseText(responseContent)
assert !response.token.isEmpty()</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ca53bcaa-94e7-4254-a1b9-1e1752792605" name="status code is 200"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
assert httpStatus.contains("200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5c048352-a665-4338-8c27-9db44ee86232" name="Invalid HTTP Status Codes"><con:configuration><codes>201,202,204,302,304,400,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="LogIn - unsucessful" id="35ba5640-212d-4ae3-8141-6b945aaf7a4e"><con:settings/><con:config service="https://reqres.in" resourcePath="/login" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LogIn - unsucessful" id="feb2c206-b026-4b2e-a162-5102f94da2a2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "email": "peter@klaven"
}</con:request><con:originalUri>https://reqres.in/api/login</con:originalUri><con:assertion type="JsonPath Match" id="3be1b760-d6f2-4cd8-9b3a-02843f46af99" name="error says that password is missing"><con:configuration><path>error</path><content>Missing password</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6ff7863f-7798-41fe-b27b-81e47a751770" name="status code is 400"><con:configuration><scriptText>String httpStatus = messageExchange.responseHeaders["#status#"]
assert httpStatus.contains("400 Bad Request")
</scriptText></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="2d35e238-c7d6-4a26-84e6-a86ea017e22a" name="Invalid HTTP Status Codes"><con:configuration><codes>200,201,202,204,302,304,401,403,404,406,410,429,500,502,503,504</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest id="ed599ec9-2b62-428d-aabe-0de867a067c4" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="6b82a865-3175-4d5d-b039-e88d58cf69c0" port="8080" path="/api/" host="localhost" name="TestRestMockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="Get list of users on page [/users]" method="GET" resourcePath="users" id="36e0df6a-4c18-431d-9493-6eb7f892ed41"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success" id="8576422a-7acc-4476-916f-d79d7cdad4b8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def queryParameter = mockRequest.getHttpRequest().getQueryString()
int page = Integer.parseInt(queryParameter.substring(queryParameter.indexOf('=') + 1))
context.setProperty("page", page)

def data
switch (page){
		case 1:
		data = [
            ["id": 1, "first_name": "George", "last_name": "Bluth", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"],
            ["id": 2, "first_name": "Janet", "last_name": "Weaver", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"],
            ["id": 3, "first_name": "Emma", "last_name": "Wong", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
        break
        case 2:
        data = [
            ["id": 4, "first_name": "Eve", "last_name": "Holt", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"],
            ["id": 5, "first_name": "Charles", "last_name": "Morris", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"],
            ["id": 6, "first_name": "Tracey", "last_name": "Ramos", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
        break
        case 3:
        data = [
            ["id": 7, "first_name": "Michael", "last_name": "Lawson", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"],
            ["id": 8, "first_name": "Lindsay", "last_name": "Ferguson", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"],
            ["id": 9, "first_name": "Tobias", "last_name": "Funke", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
        break
        case 4:
        data = [
            ["id": 10, "first_name": "Byron", "last_name": "Fields", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"],
            ["id": 11, "first_name": "George", "last_name": "Edwards", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"],
            ["id": 12, "first_name": "Rachel", "last_name": "Howell", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
        break
        default:
        data = []
        break
}	
context.setProperty("data", new groovy.json.JsonBuilder(data))</con:script><con:responseContent>{
    "page": ${page},
    "per_page": 3,
    "total": 12,
    "total_pages": 4,
    "data": ${data}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Get single user [/users/{id}]" method="GET" resourcePath="users/" id="ac43a00e-43c3-4553-918c-c7ee2469819f"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Success</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>int totalNumberOfUsers = 12
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

if(id > totalNumberOfUsers)
{
   return "Not Found"
}</con:dispatchPath><con:response name="Success" id="860a3e2a-e9f4-4cc9-9d6e-ca20da711a20" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

def data
switch (id){
		case 1:
		data = [["id": 1, "first_name": "George", "last_name": "Bluth", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"]]
		break
		case 2:
          data = [["id": 2, "first_name": "Janet", "last_name": "Weaver", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"]]
		break
          case 3:
		data = [["id": 3, "first_name": "Emma", "last_name": "Wong", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
          break
          case 4:
          data = [["id": 4, "first_name": "Eve", "last_name": "Holt", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"]]
		break
		case 5:
          data = [["id": 5, "first_name": "Charles", "last_name": "Morris", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"]]
		break
		case 6:
          data = [["id": 6, "first_name": "Tracey", "last_name": "Ramos", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
          break
          case 7:
          data = [["id": 7, "first_name": "Michael", "last_name": "Lawson", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"]]
		break
		case 8:
		data = [["id": 8, "first_name": "Lindsay", "last_name": "Ferguson", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"]]
		break
		case 9: 
		data = [["id": 9, "first_name": "Tobias", "last_name": "Funke", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
          break
          case 10:
          data = [["id": 10, "first_name": "Byron", "last_name": "Fields", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"]]
		break
		case 11:
		data = [["id": 11, "first_name": "George", "last_name": "Edwards", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"]]
		break
		case 12:
		data = [["id": 12, "first_name": "Rachel", "last_name": "Howell", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
		break
          default:
          data = []
          break
}	
context.setProperty("data", new groovy.json.JsonBuilder(data))
</con:script><con:responseContent>{
    "data": ${data}
}</con:responseContent></con:response><con:response name="Not Found" id="fa75a570-8b44-4ffd-b619-7884c4036f20" httpResponseStatus="404" mediaType="text/xml"><con:settings/><con:script>def total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))
if (id > total_pages)
{
	context.setProperty("id", id)
}</con:script><con:responseContent>User with id=${id} is not found</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Create user [/users]" method="POST" resourcePath="users" id="28a01799-d167-4818-88be-fcaf8755f0c0"><con:settings/><con:defaultResponse>Created</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Created" id="5468e6a5-7723-4ebb-a2ee-db0287e6bc62" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:script>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
context.setProperty("name", body.name)
context.setProperty("job", body.job)
context.setProperty("id", new java.util.Random().nextInt(900) + 12)
context.setProperty("createdAt", java.time.LocalDateTime.now())</con:script><con:responseContent>{
    "name": "${name}",
    "job": "${job}",
    "id": "${id}",
    "createdAt": "${createdAt}"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Update user [/users/{id}]" method="PUT" resourcePath="users/" id="188e2047-39a3-4f99-a83c-2f1b25d789ff"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>int total = 12
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

if(id > total)
{
   return "Not Found"
}
else return "Success"</con:dispatchPath><con:response name="Success" id="d4f8a34f-7fc9-468a-838e-e7c63c3417f3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
context.setProperty("name", body.name)
context.setProperty("job", body.job)
context.setProperty("updatedAt", java.time.LocalDateTime.now())</con:script><con:responseContent>{
    "name": "${name}",
    "job": "${job}",
    "updatedAt": "${updatedAt}"
}</con:responseContent></con:response><con:response name="Not Found" id="2cd2f04a-7719-4e5d-805a-d27bb311c2c6" httpResponseStatus="404" mediaType="text/xml"><con:settings/><con:script>def total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))
if (id > total_pages)
{
	context.setProperty("id", id)
}</con:script><con:responseContent>User with id=${id} is not found</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Update user [/users/{id}]" method="PATCH" resourcePath="users/" id="704aeb5a-db38-48dc-930b-2a4a7e9a23ac"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>int total = 12
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

if(id > total)
{
   return "Not Found"
}
else return "Success"</con:dispatchPath><con:response name="Success" id="9cde459b-4a32-494a-9f01-666936aa813c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
context.setProperty("name", body.name)
context.setProperty("job", body.job)
context.setProperty("updatedAt", java.time.LocalDateTime.now())</con:script><con:responseContent>{
    "name": "${name}",
    "job": "${job}",
    "updatedAt": "${updatedAt}"
}</con:responseContent></con:response><con:response name="Not Found" id="ceb7b9e4-62ef-41b5-b078-578f905bfdaa" httpResponseStatus="404" mediaType="text/xml"><con:settings/><con:script>def total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))
if (id > total_pages)
{
	context.setProperty("id", id)
}</con:script><con:responseContent>User with id=${id} is not found</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Delete user [/users/{id}]" method="DELETE" resourcePath="users/" id="40762686-ce0c-45f1-adef-aa7f89c92575"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>int total = 12
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

if(id > total)
{
   return "Not Found"
}
else return "Success - No Content"</con:dispatchPath><con:response name="Success - No Content" id="32a6d5bf-f293-46d5-b6fa-6bf2000e68df" httpResponseStatus="204" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Not Found" id="c44b82e9-8585-4962-9d6c-5b576f0e9160" httpResponseStatus="404" mediaType="text/xml"><con:settings/><con:script>def total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))
if (id > total_pages)
{
	context.setProperty("id", id)
}</con:script><con:responseContent>User with id=${id} is not found</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Register user [/register]" method="POST" resourcePath="register" id="0827966e-01eb-4196-a2d5-5bf987438dc3"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
if(!body.toString().contains("password")){
	return "Bad Request"
}
else return "Created"
</con:dispatchPath><con:response name="Created" id="e14b4eac-d2bb-4fbb-81cd-866470354aae" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:script>context.setProperty("token", org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(20))</con:script><con:responseContent>{
    "token": "${token}"
}</con:responseContent></con:response><con:response name="Bad Request" id="05624b46-2034-45f7-b2f1-80c3ebd58a6a" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
    "error": "Missing password"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Log user in [/login]" method="POST" resourcePath="login" id="0af12560-042e-43c8-881e-aeea8b22f4e5"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
if(!body.toString().contains("password")){
	return "Bad Request"
}
else return "Success"
</con:dispatchPath><con:response name="Success" id="743f79cb-dd77-4004-92a3-ff6e9b7325a8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>context.setProperty("token", org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(20))</con:script><con:responseContent>{
    "token": "${token}"
}</con:responseContent></con:response><con:response name="Bad Request" id="f53e8e61-9b6a-4842-9e24-1f62cc80153a" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
    "error": "Missing password"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>