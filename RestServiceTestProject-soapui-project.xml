<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0cbb0342-be6d-43b7-8bb6-616c39805004" activeEnvironment="Default" name="RestServiceTestProject" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="bda34219-1708-4c49-877e-8c1c68b48b93" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://reqres.in" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://DESKTOP-SAEGSCA:8089/</con:endpoint><con:endpoint>https://reqres.in/api</con:endpoint></con:endpoints><con:resource name="Get list of users on page" path="/users" id="a874ddd8-545d-416a-a750-2a22c8a3d8f9"><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="" id="cd05d876-c1a0-45e0-9c99-47d85c3dc782" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:user="https://reqres.in/api/users">user:Response</con:element></con:representation><con:request name="GET list of users on page" id="dec87582-da36-40b0-af4c-fd0413862814" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="page" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>page</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Get single user" path="/users/{id}" id="eefed02d-0bb1-4c4f-8c80-4debadc2fa41"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="" id="1aff1e1c-bf94-4368-b847-ed69eae3fb7a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="https://reqres.in/api/users/1">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>Fault</con:element></con:representation><con:request name="GET single user" id="75e20893-5e51-44ab-992b-29649145cfd5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Create user" path="/users" id="4930a95d-8e7b-49d6-9f53-6f3671ac419e"><con:settings/><con:parameters/><con:method name="" id="6d1c865f-6d8d-43f9-8011-3531ba285456" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:user="https://reqres.in/api/users">user:Response</con:element></con:representation><con:request name="Create a user" id="a8cb4b62-e057-4bd1-845e-3a8a77929331" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "leader"
}</con:request><con:originalUri>https://reqres.in/api/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Update user" path="/users/{id}" id="25f24b62-de1e-4148-8d28-f5593af73c63"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>1</con:value><con:style>TEMPLATE</con:style><con:default>1</con:default></con:parameter></con:parameters><con:method name="" id="2a762043-e29e-478d-8416-f6d3d24017db" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:user="https://reqres.in/api/users">user:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Update a user" id="f25b2f67-cbd6-4460-861e-420d99254081" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "zion resident"
}</con:request><con:originalUri>https://reqres.in/api/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Update user" path="/users/{id}" id="442d0d0c-d2c0-45fc-8ce3-3342522942a5"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="" id="6f4fae06-214d-4284-be1e-4ac2033dc8f7" method="PATCH"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="https://reqres.in/api/users/1">ns:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Update a user" id="fcf64dfc-376e-4fb0-aaf8-ca4abf89307c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "name": "morpheus",
    "job": "zion resident"
}</con:request><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Delete user" path="/users/{id}" id="99abe82b-6351-4be2-88a4-b35c9270fc3a"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="" id="d04997cb-05d9-49be-b55b-7d5e60651ebd" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Delete a user" id="ef24a021-b638-4e14-bafe-12f5958845aa" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Register user" path="/register" id="34e22721-ba29-4fd8-b841-ed74f53bb858"><con:settings/><con:parameters/><con:method name="" id="a7cd06cc-97a6-45b4-8ef7-799c6b27e68f" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:reg="https://reqres.in/api/register">reg:Response</con:element></con:representation><con:request name="Register a user" id="a5d2b87d-b3c9-4ee1-bd32-d9aa4fd18435" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "email": "sydney@fife",
    "password": "pistol"
}</con:request><con:originalUri>https://reqres.in/api/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Log user in" path="/login" id="258a377a-92c9-4414-b265-deb1bb9e8932"><con:settings/><con:parameters/><con:method name="" id="60c5ab68-1a54-4e49-bacb-1ce9405cb88b" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="https://reqres.in/api/login">log:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="LogIn" id="feb2c206-b026-4b2e-a162-5102f94da2a2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://reqres.in/api</con:endpoint><con:request>{
    "email": "peter@klaven",
    "password": "cityslicka"
}</con:request><con:originalUri>https://reqres.in/api/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="6b82a865-3175-4d5d-b039-e88d58cf69c0" port="8080" path="/api/" host="localhost" name="TestRestMockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="Get list of users on page [/users]" method="GET" resourcePath="users" id="36e0df6a-4c18-431d-9493-6eb7f892ed41"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success" id="8576422a-7acc-4476-916f-d79d7cdad4b8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def queryParameter = mockRequest.getHttpRequest().getQueryString()
int page = Integer.parseInt(queryParameter.substring(queryParameter.indexOf('=') + 1))
context.setProperty("page", page)

def data
switch (page){
		case 1:
		data = [
            ["id": 1, "first_name": "George", "last_name": "Bluth", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"],
            ["id": 2, "first_name": "Janet", "last_name": "Weaver", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"],
            ["id": 3, "first_name": "Emma", "last_name": "Wong", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
        break
        case 2:
        data = [
            ["id": 4, "first_name": "Eve", "last_name": "Holt", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"],
            ["id": 5, "first_name": "Charles", "last_name": "Morris", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"],
            ["id": 6, "first_name": "Tracey", "last_name": "Ramos", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
        break
        case 3:
        data = [
            ["id": 7, "first_name": "Michael", "last_name": "Lawson", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"],
            ["id": 8, "first_name": "Lindsay", "last_name": "Ferguson", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"],
            ["id": 9, "first_name": "Tobias", "last_name": "Funke", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
        break
        case 4:
        data = [
            ["id": 10, "first_name": "Byron", "last_name": "Fields", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"],
            ["id": 11, "first_name": "George", "last_name": "Edwards", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"],
            ["id": 12, "first_name": "Rachel", "last_name": "Howell", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
        break
        default:
        data = []
        break
}	
context.setProperty("data", new groovy.json.JsonBuilder(data))</con:script><con:responseContent>{
    "page": ${page},
    "per_page": 3,
    "total": 12,
    "total_pages": 4,
    "data": ${data}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Get single user [/users/{id}]" method="GET" resourcePath="users/" id="ac43a00e-43c3-4553-918c-c7ee2469819f"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Success</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>int total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

if(id > total_pages)
{
   return "Not Found"
}</con:dispatchPath><con:response name="Success" id="860a3e2a-e9f4-4cc9-9d6e-ca20da711a20" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

def data
switch (id){
		case 1:
		data = [["id": 1, "first_name": "George", "last_name": "Bluth", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"]]
		break
		case 2:
          data = [["id": 2, "first_name": "Janet", "last_name": "Weaver", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"]]
		break
          case 3:
		data = [["id": 3, "first_name": "Emma", "last_name": "Wong", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
          break
          case 4:
          data = [["id": 4, "first_name": "Eve", "last_name": "Holt", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"]]
		break
		case 5:
          data = [["id": 5, "first_name": "Charles", "last_name": "Morris", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"]]
		break
		case 6:
          data = [["id": 6, "first_name": "Tracey", "last_name": "Ramos", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
          break
          case 7:
          data = [["id": 7, "first_name": "Michael", "last_name": "Lawson", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"]]
		break
		case 8:
		data = [["id": 8, "first_name": "Lindsay", "last_name": "Ferguson", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"]]
		break
		case 9: 
		data = [["id": 9, "first_name": "Tobias", "last_name": "Funke", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
          break
          case 10:
          data = [["id": 10, "first_name": "Byron", "last_name": "Fields", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"]]
		break
		case 11:
		data = [["id": 11, "first_name": "George", "last_name": "Edwards", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg"]]
		break
		case 12:
		data = [["id": 12, "first_name": "Rachel", "last_name": "Howell", "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg"]]
		break
          default:
          data = []
          break
}	
context.setProperty("data", new groovy.json.JsonBuilder(data))
</con:script><con:responseContent>{
    "data": ${data}
}</con:responseContent></con:response><con:response name="Not Found" id="fa75a570-8b44-4ffd-b619-7884c4036f20" httpResponseStatus="404" mediaType="text/xml"><con:settings/><con:script>def total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))
if (id > total_pages)
{
	context.setProperty("id", id)
}</con:script><con:responseContent>User with id=${id} is not found</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Create user [/users]" method="POST" resourcePath="users" id="28a01799-d167-4818-88be-fcaf8755f0c0"><con:settings/><con:defaultResponse>Created</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Created" id="5468e6a5-7723-4ebb-a2ee-db0287e6bc62" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:script>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
context.setProperty("name", body.name)
context.setProperty("job", body.job)
context.setProperty("id", new java.util.Random().nextInt(900) + 12)
context.setProperty("createdAt", java.time.LocalDateTime.now())</con:script><con:responseContent>{
    "name": "${name}",
    "job": "${job}",
    "id": "${id}",
    "createdAt": "${createdAt}"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Update user [/users/{id}]" method="PUT" resourcePath="users/" id="188e2047-39a3-4f99-a83c-2f1b25d789ff"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>int total = 12
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

if(id > total)
{
   return "Not Found"
}
else return "Success"</con:dispatchPath><con:response name="Success" id="d4f8a34f-7fc9-468a-838e-e7c63c3417f3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
context.setProperty("name", body.name)
context.setProperty("job", body.job)
context.setProperty("updatedAt", java.time.LocalDateTime.now())</con:script><con:responseContent>{
    "name": "${name}",
    "job": "${job}",
    "updatedAt": "${updatedAt}"
}</con:responseContent></con:response><con:response name="Not Found" id="2cd2f04a-7719-4e5d-805a-d27bb311c2c6" httpResponseStatus="404" mediaType="text/xml"><con:settings/><con:script>def total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))
if (id > total_pages)
{
	context.setProperty("id", id)
}</con:script><con:responseContent>User with id=${id} is not found</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Update user [/users/{id}]" method="PATCH" resourcePath="users/" id="704aeb5a-db38-48dc-930b-2a4a7e9a23ac"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>int total = 12
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

if(id > total)
{
   return "Not Found"
}
else return "Success"</con:dispatchPath><con:response name="Success" id="9cde459b-4a32-494a-9f01-666936aa813c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
context.setProperty("name", body.name)
context.setProperty("job", body.job)
context.setProperty("updatedAt", java.time.LocalDateTime.now())</con:script><con:responseContent>{
    "name": "${name}",
    "job": "${job}",
    "updatedAt": "${updatedAt}"
}</con:responseContent></con:response><con:response name="Not Found" id="ceb7b9e4-62ef-41b5-b078-578f905bfdaa" httpResponseStatus="404" mediaType="text/xml"><con:settings/><con:script>def total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))
if (id > total_pages)
{
	context.setProperty("id", id)
}</con:script><con:responseContent>User with id=${id} is not found</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Delete user [/users/{id}]" method="DELETE" resourcePath="users/" id="40762686-ce0c-45f1-adef-aa7f89c92575"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>int total = 12
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))

if(id > total)
{
   return "Not Found"
}
else return "Success - No Content"</con:dispatchPath><con:response name="Success - No Content" id="32a6d5bf-f293-46d5-b6fa-6bf2000e68df" httpResponseStatus="204" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Not Found" id="c44b82e9-8585-4962-9d6c-5b576f0e9160" httpResponseStatus="404" mediaType="text/xml"><con:settings/><con:script>def total_pages = 4
def requestPath = mockRequest.getPath()
int id = Integer.parseInt(requestPath.substring(requestPath.lastIndexOf('/') + 1))
if (id > total_pages)
{
	context.setProperty("id", id)
}</con:script><con:responseContent>User with id=${id} is not found</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Register user [/register]" method="POST" resourcePath="register" id="0827966e-01eb-4196-a2d5-5bf987438dc3"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
if(!body.toString().contains("password")){
	return "Bad Request"
}
else return "Created"
</con:dispatchPath><con:response name="Created" id="e14b4eac-d2bb-4fbb-81cd-866470354aae" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:script>context.setProperty("token", org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(20))</con:script><con:responseContent>{
    "token": "${token}"
}</con:responseContent></con:response><con:response name="Bad Request" id="05624b46-2034-45f7-b2f1-80c3ebd58a6a" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
    "error": "Missing password"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Log user in [/login]" method="POST" resourcePath="login" id="0af12560-042e-43c8-881e-aeea8b22f4e5"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>groovy.json.JsonSlurper slurper = new groovy.json.JsonSlurper()
String requestData = new String(mockRequest.getRawRequestData())
log.info "requestData" + requestData
def body = slurper.parseText(requestData)
log.info "body" + body
if(!body.toString().contains("password")){
	return "Bad Request"
}
else return "Success"
</con:dispatchPath><con:response name="Success" id="743f79cb-dd77-4004-92a3-ff6e9b7325a8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>context.setProperty("token", org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(20))</con:script><con:responseContent>{
    "token": "${token}"
}</con:responseContent></con:response><con:response name="Bad Request" id="f53e8e61-9b6a-4842-9e24-1f62cc80153a" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
    "error": "Missing password"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>